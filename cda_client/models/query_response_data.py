# coding: utf-8

"""
    CDA API

    API definition for the CDA  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cda_client.configuration import Configuration


class QueryResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_sql': 'str',
        'result': 'list[object]',
        'previous_url': 'str',
        'next_url': 'str'
    }

    attribute_map = {
        'query_sql': 'query_sql',
        'result': 'result',
        'previous_url': 'previous_url',
        'next_url': 'next_url'
    }

    def __init__(self, query_sql=None, result=None, previous_url=None, next_url=None, local_vars_configuration=None):  # noqa: E501
        """QueryResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._query_sql = None
        self._result = None
        self._previous_url = None
        self._next_url = None
        self.discriminator = None

        if query_sql is not None:
            self.query_sql = query_sql
        if result is not None:
            self.result = result
        if previous_url is not None:
            self.previous_url = previous_url
        if next_url is not None:
            self.next_url = next_url

    @property
    def query_sql(self):
        """Gets the query_sql of this QueryResponseData.  # noqa: E501


        :return: The query_sql of this QueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._query_sql

    @query_sql.setter
    def query_sql(self, query_sql):
        """Sets the query_sql of this QueryResponseData.


        :param query_sql: The query_sql of this QueryResponseData.  # noqa: E501
        :type: str
        """

        self._query_sql = query_sql

    @property
    def result(self):
        """Gets the result of this QueryResponseData.  # noqa: E501


        :return: The result of this QueryResponseData.  # noqa: E501
        :rtype: list[object]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this QueryResponseData.


        :param result: The result of this QueryResponseData.  # noqa: E501
        :type: list[object]
        """

        self._result = result

    @property
    def previous_url(self):
        """Gets the previous_url of this QueryResponseData.  # noqa: E501


        :return: The previous_url of this QueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._previous_url

    @previous_url.setter
    def previous_url(self, previous_url):
        """Sets the previous_url of this QueryResponseData.


        :param previous_url: The previous_url of this QueryResponseData.  # noqa: E501
        :type: str
        """

        self._previous_url = previous_url

    @property
    def next_url(self):
        """Gets the next_url of this QueryResponseData.  # noqa: E501


        :return: The next_url of this QueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._next_url

    @next_url.setter
    def next_url(self, next_url):
        """Sets the next_url of this QueryResponseData.


        :param next_url: The next_url of this QueryResponseData.  # noqa: E501
        :type: str
        """

        self._next_url = next_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryResponseData):
            return True

        return self.to_dict() != other.to_dict()
